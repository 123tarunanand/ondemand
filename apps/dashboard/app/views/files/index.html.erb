<div class="text-right">
  <a id="open-in-terminal-btn" class="btn btn-outline-dark btn-sm disabled" href="#"><i class="fas fa-terminal" aria-hidden="true"></i> Open in Terminal</a>
  <button id="new-file-btn" type="button" class="btn btn-outline-dark btn-sm"><i class="fas fa-plus" aria-hidden="true"></i> New File</button>
  <button id="new-dir-btn" type="button" class="btn btn-outline-dark btn-sm"><i class="fas fa-folder-plus" aria-hidden="true"></i> New Directory</button>
  <button id="upload-btn" type="button" class="btn btn-primary btn-sm"><i class="fas fa-upload" aria-hidden="true"></i> Upload</button>
  <button id="download-btn" type="button" class="btn btn-primary btn-sm"><i class="fas fa-download" aria-hidden="true"></i> Download</button>
  <button id="copy-move-btn" type="button" class="btn btn-outline-dark btn-sm"><i class="fas fa-copy" aria-hidden="true"></i> Copy/Move</button>
  <button id="delete-btn" type="button" class="btn btn-danger btn-sm"><i class="fas fa-trash" aria-hidden="true"></i> Delete</button>
</div>

<hr>

<div class="row">
<div class="col-md-3">
  <ul id="favorites" class="nav nav-pills flex-column">
    <li role="presentation" class="nav-item"><%= link_to 'Home Directory', files_path(Dir.home), class: "nav-link d bg-light" %></li>
    <% OodFilesApp.new.favorite_paths.each do |p| %>
      <li class="nav-item bg-light"><%= link_to p.title || p.path.to_s, files_path(p.path.to_s), class: "nav-link d" %>
    <% end %>
  </ul>


<script id="actions-btn-template" type="text/template">
<div class="btn-group actions-btn-group">
  <%# FIXME: outline dark is easy to see unless the row is selected, then it is difficult to see; consider a different row selection color or indicator
  for example the border-left: 4px solid #0088cc on the checkbox td
  and then some very very light blue highlight that still has the necessary contrast ratio with black on white/black on grey for WCAG
   %>
  <button type="button" class="actions-btn btn btn-outline-dark btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
    <span class="fa fa-ellipsis-v"></span>
  </button>
  <ul class="dropdown-menu">
    {{#if file}}
    <li><a href="#" class="view-file dropdown-item" data-row-index="{{row_index}}"><i class="fas fa-eye" aria-hidden="true"></i> View</a></li>
    <li><a href="#" class="edit-file dropdown-item" data-row-index="{{row_index}}"><i class="fas fa-edit" aria-hidden="true"></i> Edit</a></li>
    {{/if}}
    <li><a href="#" class="rename-file dropdown-item" data-row-index="{{row_index}}"><i class="fas fa-font" aria-hidden="true"></i> Rename</a></li>
    {{#if file}}
    <li><a href="#" class="download-file dropdown-item" data-row-index="{{row_index}}"><i class="fas fa-download" aria-hidden="true"></i> Download</a></li>
    {{/if}}
    <li class="dropdown-divider mt-4"></li>
    <li><a href="#" class="delete-file dropdown-item text-danger" data-row-index="{{row_index}}"><i class="fas fa-trash" aria-hidden="true"></i> Delete</a></li>
  </ul>
</div>
</script>


</div>

<div class="col-md-9">
  <%# TODO put search box ABOVE the breadcrumbs %>
  <div style="margin-top: 20px">

    <ol id="path-breadcrumbs" class="breadcrumb breadcrumb-no-delimiter">
      <%= render partial: 'breadcrumb', collection: @path.descend, as: :file, locals: { file_count: @path.descend.count, full_path: @path } %>
    </ol>

    <table class="table table-striped table-condensed" id="directory-contents" style="width:100%">
      <thead>
        <tr>
          <th><span class="sr-only">Select</span></th>
          <th>Type</th>
          <th>Name</th>
          <th><span class="sr-only">Actions</span></th>
          <th>Size</th>
          <th>Modified at</th>
          <th>Owner</th>
          <th>Mode</th>
        </tr>
      </thead>
      <tbody>
      </tbody>
    </table>
  </div>
</div>

</div>

<script>
const csrf_token = document.querySelector('meta[name="csrf-token"]').content;

// this uses event delegation so it captures events even if dom element is recreated
var clipboardjs = new ClipboardJS('#copy-path');
clipboardjs.on('success', function(e) {
  $(e.trigger).tooltip({title: 'Copied path to clipboard!', trigger: 'manual', placement: 'bottom'}).tooltip('show');
  setTimeout(() => $(e.trigger).tooltip('hide'), 2000);
  e.clearSelection();
});
clipboardjs.on('error', function(e) {
  e.clearSelection();
});

history.replaceState({
  currentDirectory: '<%= @path %>',
  currentDirectoryUrl: '<%= files_path(@path) %>',
  currentDirectoryUpdatedAt: '<%= Time.now.to_i %>'
}, null);

$.fn.dataTable.ext.search.push(
    function( settings, data, dataIndex  ) {
      return getShowDotFiles() || ! data[2].startsWith('.');
    }
)

let actionsBtnTemplate = (function(){
  let template_str  = $('#actions-btn-template').html();
  return Handlebars.compile(template_str);
})();

function update_datatables_status(api){
  // from "function info ( api )" of https://cdn.datatables.net/select/1.3.1/js/dataTables.select.js
  let rows    = api.rows( { selected: true } ).flatten().length,
      page_info = api.page.info(),
      msg = page_info.recordsTotal == page_info.recordsDisplay ? `Showing ${page_info.recordsDisplay} rows` : `Showing ${page_info.recordsDisplay} of ${page_info.recordsTotal} rows`;

  $('.datatables-status').html(`${msg} - ${rows} rows selected`);
}

function getShowOwnerMode() {
  return localStorage.getItem('show-owner-mode') == 'true'
}

function getShowDotFiles() {
  return localStorage.getItem('show-dotfiles') == 'true'
}

function setShowOwnerMode(visible) {
  localStorage.setItem('show-owner-mode', new Boolean(visible));
}

function setShowDotFiles(visible) {
  localStorage.setItem('show-dotfiles', new Boolean(visible));
}

function updateDotFileVisibility() {
  table.draw();
}

function updateShowOwnerModeVisibility() {
  let visible = getShowOwnerMode();

  table.column('owner:name').visible(visible);
  table.column('mode:name').visible(visible);
}

var table = $('#directory-contents').on('xhr.dt', function ( e, settings, json, xhr ) {
  // new ajax request for new data so update date/time
  if(json && json.time){
    history.replaceState(_.merge({}, history.state, {currentDirectoryUpdatedAt: json.time}), null);
  }
}).DataTable({
  autoWidth: false,
  language: {
    search: 'Filter:',
  },
  order: [[1, "asc"], [2, "asc"]],
  rowId: 'id',
  paging:false,
  scrollCollapse: true,
  select: {
    style: 'os',
    className: 'selected',
    toggleable: true,
    // don't trigger select checkbox column as select
    // if you need to omit more columns, use a "selectable" class on the columns you want to support selection
    selector: 'td:not(:first-child)'
  },
  // https://datatables.net/reference/option/dom
  // dom: '', dataTables_info nowrap
  //
  // put breadcrmbs below filter!!!
  dom: "<'row'<'col-sm-12'f>>" + // normally <'row'<'col-sm-6'l><'col-sm-6'f>> but we disabled pagination so l is not needed (dropdown for selecting # rows)
       "<'row'<'col-sm-12'<'dt-status-bar'<'datatables-status float-right'><'transfers-status'>>>>"+
       "<'row'<'col-sm-12'tr>>", // normally this is <'row'<'col-sm-5'i><'col-sm-7'p>> but we disabled pagination so have info take whole row
  columns: [
    {
      data: null,
      orderable: false,
      defaultContent: '<input type="checkbox">',
      render: function(data, type, row, meta) {
        var api = new $.fn.dataTable.Api( meta.settings );
        let selected = api.rows(meta.row, { selected: true }).count() > 0;
        return `<input type="checkbox" ${selected ? 'checked' : ''}> ${selected ? 'checked' : ''}`;
      }
    },
    { data: 'type', render: (data, type, row, meta) => data == 'd' ? '<span title="directory" class="fa fa-folder" style="color: gold"><span class="sr-only"> dir</span></span>' : '<span title="file" class="fa fa-file" style="color: lightgrey"><span class="sr-only"> file</span></span>' }, // type
    { name: 'name', data: 'name', className: 'text-break', render: (data, type, row, meta) => `<a class="${row.type} name" href="${row.type == 'd' ? row.url : row.download_url}">${Handlebars.escapeExpression(data)}</a>` }, // name
    { name: 'actions', orderable: false, data: null, render: (data, type, row, meta) => actionsBtnTemplate({ row_index: meta.row, file: row.type != 'd'  }) }, // FIXME: pass row index or something needed for finding item
    { data: 'size',
      render: (data, type, row, meta) => {
        return type == "display" ? row.human_size : data;
      }
    }, // human_size
    { data: 'modified_at', render: (data, type, row, meta) => {
      if(type == "display"){
        let date = new Date(data * 1000)

        // Return formatted date "3/23/2021 10:52:28 AM"
        return isNaN(data) ? 'Invalid Date' : `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`
      }
      else{
        return data;
      }
    }}, // modified_at
    { name: 'owner', data: 'owner', visible: getShowOwnerMode() }, // owner
    { name: 'mode', data: 'mode', visible: getShowOwnerMode(), render: (data, type, row, meta) => {

      // mode after base conversion is a string such as "100755"
      let mode = data.toString(8)

      // only care about the last 3 bits (755)
      let chmodDisplay = mode.substring(mode.length - 3)

      return chmodDisplay
    }} // mode
  ]
});

// prepend show dotfiles checkbox to search box
$('#directory-contents_filter').prepend(`<label style="margin-right: 20px" for="show-dotfiles"><input type="checkbox" id="show-dotfiles" ${ getShowDotFiles() ? 'checked' : ''}> Show Dotfiles</label>`)
$('#directory-contents_filter').prepend(`<label style="margin-right: 14px" for="show-owner-mode"><input type="checkbox" id="show-owner-mode" ${ getShowOwnerMode() ? 'checked' : ''}> Show Owner/Mode</label>`)

table.on('draw.dtSelect.dt select.dtSelect.dt deselect.dtSelect.dt info.dt', function () {
  update_datatables_status(table);
});

<% unless alert %>
// initial data load
reloadTable();
<% end %>

$('#show-dotfiles').on('change', () => {
  let visible = $('#show-dotfiles').is(':checked');

  setShowDotFiles(visible);
  updateDotFileVisibility();
});

$('#show-owner-mode').on('change', () => {
  let visible = $('#show-owner-mode').is(':checked');

  setShowOwnerMode(visible);
  updateShowOwnerModeVisibility();
});

$('#path-breadcrumbs').on('click', '#goto-btn', function(){
  Swal.fire({
    title: 'Change Directory',
    input: 'text',
    inputLabel: 'Path',
    inputValue: history.state.currentDirectory,
    inputAttributes: {
      spellcheck: 'false',
    },
    showCancelButton: true,
    inputValidator: (value) => {
      if (! value || ! value.startsWith('/')) {
        // TODO: validate filenames against listing
        return 'Provide an absolute pathname'
      }
    },
    showClass: {
      popup: 'swal2-noanimation',
      backdrop: 'swal2-noanimation'
    },
    hideClass: {
      popup: '',
      backdrop: ''
    }
  })
  .then((result) => result.isConfirmed ? Promise.resolve(result.value) : Promise.reject('cancelled'))
  .then((pathname) => goto('<%= files_path('/') %>' + pathname))
});

$('#new-file-btn').on("click", () => {
  Swal.fire({
    title: 'New File',
    input: 'text',
    inputLabel: 'Filename',
    showCancelButton: true,
    inputValidator: (value) => {
      if (! value || value.includes("/")) {
        // TODO: validate filenames against listing
        return 'Provide a filenamethat does not have / in it'
      }
    },
    showClass: {
      popup: 'swal2-noanimation',
      backdrop: 'swal2-noanimation'
    },
    hideClass: {
      popup: '',
      backdrop: ''
    }
  })
  .then((result) => result.isConfirmed ? Promise.resolve(result.value) : Promise.reject('cancelled'))
  .then((filename) => newFile(filename));
});

$('#new-dir-btn').on("click", () => {
  Swal.fire({
    title: 'New Directory',
    input: 'text',
    inputLabel: 'Directory name',
    inputAttributes: {
      spellcheck: 'false',
    },
    showCancelButton: true,
    inputValidator: (value) => {
      if (! value || value.includes("/")) {
        // TODO: validate filenames against listing
        return 'Provide a directory name that does not have / in it'
      }
    },
    showClass: {
      popup: 'swal2-noanimation',
      backdrop: 'swal2-noanimation'
    },
    hideClass: {
      popup: '',
      backdrop: ''
    }
  })
  .then((result) => result.isConfirmed ? Promise.resolve(result.value) : Promise.reject('cancelled'))
  .then((filename) => newDirectory(filename));
});

window.onpopstate = function(event){
  // FIXME: handle edge case if state ! exist
  setTimeout(() => {
    goto(event.state.currentDirectoryUrl, false);
  }, 0);
};

// borrowed from Turbolinks
// event: MouseEvent
function clickEventIsSignificant(event) {
  return !(
    // (event.target && (event.target as any).isContentEditable)
       event.defaultPrevented
    || event.which > 1
    || event.altKey
    || event.ctrlKey
    || event.metaKey
    || event.shiftKey
  )
}

// this would be perfect for stimulus FYI
$('#directory-contents tbody').on('click', '.view-file', function(e){
  e.preventDefault();

  let row = table.row(this.dataset.rowIndex).data();
  window.open(row.url, 'ViewFile', "location=yes,resizable=yes,scrollbars=yes,status=yes");
});

$('#directory-contents tbody').on('click', '.edit-file', function(e){
  e.preventDefault();

  let row = table.row(this.dataset.rowIndex).data();
  window.open(row.edit_url);
});

$('#directory-contents tbody, #path-breadcrumbs, #favorites').on('click', 'a.d', function(){
  if(clickEventIsSignificant(event)){
    event.preventDefault();
    event.cancelBubble = true;
    if(event.stopPropagation) event.stopPropagation();

    goto(this.getAttribute("href"));
  }
});

$('#directory-contents tbody').on('dblclick', 'tr td:not(:first-child)', function(){
    // handle doubleclick
    let a = this.parentElement.querySelector('a');
    if(a.classList.contains('d')) goto(a.getAttribute("href"));
});

// if only 1 selected item, do not allow to de-select
table.on('user-select', function ( e, dt, type, cell, originalEvent  ) {
    var selected_rows = dt.rows( { selected: true  }  );

    if(originalEvent.target.closest('.actions-btn-group')){
      // dont do user select event when opening or working with actions btn dropdown
      e.preventDefault();
    }
    else if(selected_rows.count() == 1 && cell.index().row == selected_rows.indexes()[0] ){
      // dont do user select because already selected
      e.preventDefault();
    }
    else{
      // row need to find the checkbox to give it the focus
      cell.node().closest('tr').querySelector('input[type=checkbox]').focus();
    }
});

table.on( 'deselect', function ( e, dt, type, indexes ) {
  dt.rows(indexes).nodes().toArray().forEach(e => $(e).find('input[type=checkbox]').prop('checked', false));
});

table.on( 'select', function ( e, dt, type, indexes ) {
  dt.rows(indexes).nodes().toArray().forEach(e => $(e).find('input[type=checkbox]').prop('checked', true));
});

$('#directory-contents tbody').on('click', 'tr td:first-child input[type=checkbox]', function(){
  // input checkbox checked or not

  if($(this).is(':checked')){
    // select row
    table.row(this.closest('tr')).select();
  }
  else{
    // deselect row
    table.row(this.closest('tr')).deselect();
  }

  this.focus();
});

$('#directory-contents tbody').on('keydown', 'input, a', function(e){
  if(e.key == "ArrowDown"){
    e.preventDefault();

    // let tr = this.closest('tr').nextSibling;
    let tr = $(this.closest('tr')).next('tr').get(0);
    if(tr){
      tr.querySelector('input[type=checkbox]').focus();

      // deselect if not holding shift key to work
      // like native file browsers
      if(! e.shiftKey){
        table.rows().deselect();
      }

      // select if moving down
      table.row(tr).select();
    }
  }
  else if(e.key == "ArrowUp"){
    e.preventDefault();

    let tr = $(this.closest('tr')).prev('tr').get(0);
    if(tr){
      tr.querySelector('input[type=checkbox]').focus();

      // deselect if not holding shift key to work
      // like native file browsers
      if(! e.shiftKey){
        table.rows().deselect();
      }

      // select if moving up
      table.row(tr).select();
    }
  }
});

</script>
